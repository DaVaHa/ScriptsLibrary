### BOKEH ###

Glyphs = visual shapes

## circle
from bokeh.io import output_file, show
from bokeh.plotting import figure
plot = figure(plot_width=400, tools='pan,box_zoom')
plot.circle([1,2,3,4,5], [8,6,5,2,3])
output_file('circle.html')
show(plot)

plot=figure()
plot.circle(x=10, y=[2,5,8,12], size=[10,20,30,40])

p = figure(x_axis_label='fertility', y_axis_label='female_literacy (% population)')
p.circle(x=fertility_latinamerica, y= female_literacy_latinamerica)
p.x(x=fertility_africa, y=female_literacy_africa)
output_file('fert_lit_separate.html')
show(p)

## line
from bokeh.io import output_file, show
from bokeh.plotting import figure
x = [1,2,3,4,5]
y = [8,6,5,2,3]
plot = figure()
plot.line(x, y, line_width=2)
plot.circle(x,y, fill_color='white', size=10)
output_file('line.html')
show(plot)

## patches
from bokeh.io import output_file, show
from bokeh.plotting import figure
xs = [ [1,1,2,2], [2,2,4], [2,2,3,3] ]
ys = [ [2,5,5,2], [3,5,5], [2,3,4,2] ]
plot=figure()
plot.patches(xs,ys, fill_color=['red', 'blue', 'green'], line_color='white')
output_file('patches.html')
show(plot)

## column data source
from bokeh.plotting import ColumnDataSource
source = ColumnDataSource(data={'x':[1,2,3,4,5], 'y': [8,6,5,2,3]})
source.data

from bokeh.sampledata.iris import flowers as df
source = ColumnDataSource(df)

## selecion vs nonselection
plot = figure(tools='box_select, lasso_select')  #tools on right upper corner
plot.circle(x,y, selection_color='red', nonselection_fill_alpha=0.2, nonselection_fill_color='grey')

## hover tool
from bokeh.models import HoverTool
hover = HoverTool(tooltips=None, mode='hline')
plot = figure(tools=[hover, 'crosshair'])
plot.circle(x,y, size=15, hover_color='red')

hover = HoverTool(tooltips=[('a name', '@a'), ('b name', '@b'), ('c name', '@c')])  ## displays values of columns a, b & c
plot = figure(tools=[hover, 'pan', 'wheel_zoom'])
p.add_tools(hover)

## categorical color mapper
from bokeh.models import CategoricalColorMapper
mapper = CategoricalColorMapper(factors=['setosa', 'virginica', 'versicolor'], palette=['red', 'green', 'blue'])
plot = figure(x_axis_label='petal_length', y_axis_label='sepal_length')
plot.circle('petal_length', 'sepal_length', size=10, source=source, color={'field':'species', 'transform':mapper})

## rows/columns of plots
from bokeh.layouts import row, column
layout = row(p1,p2,p3) // column(p1,p2,p3)
output_file('row.html')
show(layout)

layout= row(column(p1,p2), p3)

## gridplot
from bokeh.layouts import gridplot
layout = gridplot([[None, p1],[p2,p3]], toolbar_location=None)

## panel, tabs
from bokeh.models.widgets import Tabs, Panel
first = Panel(child=row(p1,p2), title='first')
second= Panel(child=row(p3), title='second')
layout = Tabs(tabs=[first, second])
output_file('tabbed.html')
show(layout)

## linking axes
p3.x_range = p2.x_range = p1.x_range
p3.y_range = p2.y_range = p1.y_range

## legend
plot.legend.location ='top_left'
plot.legend.background_fill_color='lightgray'

## bokeh server
from bokeh.io import curdoc
curdoc().add_root(layout)

bokeh serve --show myapp.py
bokeh serve --show myappdir/

## slider
from bokeh.io import curdoc
from bokeh.layouts import widgetbox
from bokeh.models import Slider
slider = Slider(title='my slider', start=0, end=10, step=0.1, value=2)
layout = widgetbox(slider)
curdoc().add_root(layout)

# connect sliders to plots
def callback(attr, old, new):
    N = slider.value
    source.data = {'x': random(N), 'y': random(N)}
slider.on_change('value', callback)
layout = column(slider, plot)
curdoc().add_root(layout)

def callback(attr, old, new):
    scale = slider.value
    new_y = np.sin(scale/x)
    source.data = {'x': x, 'y': new_y}
slider.on_change('value', callback)
layout = column(widgetbox(slider), plot)
curdoc().add_root(layout)

# dropdown menu
from bokeh.models import Select
menu = Select(options=['uniform', 'normal', 'lognormal'], value='uniform', title='Distribution')
def callback(attr, old, new):
    if menu.value == 'uniform': f = random
    elif menu.value == 'normal': f = normal
    else:       f = lognormal
    source.data ={'x': f(size=N), 'y': f(size=N)}
menu.on_change('value', callback)
layout=column(menu, plot)
curdoc().add_root(layout)

## buttons
from bokeh.models import Button
button = Button(label='press me')
def update():
    # whatever
button.on_click(update)

from bokeh.models import CheckboxGroup, RadioGroup, Toggle
toggle = Toggle(label='Some on/off', button_type='success')
checkbox = CheckboxGroup(labels=['foo', 'bar', 'baz'])
radio = RadioGroup(labels=['2000', '2010', '2020'])
def callback(active):
    #active tells which button is active
curdoc().add_root(widgetbox(toggle, checkbox, radio))


## CASE STUDY ##
from bokeh.io import output_file, show
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource, HoverTool
source = ColumnDataSource(data={
    'x'       : data.loc[1970].fertility,
    'y'       : data.loc[1970].life,
    'country' : data.loc[1970].Country
})
p = figure(title='1970', x_axis_label='Fertility (children per woman)', y_axis_label='Life Expectancy (years)',
           plot_height=400, plot_width=700,
           tools=[HoverTool(tooltips='@country')])
p.circle(x='x', y='y', source=source)
output_file('gapminder.html')
show(p)


from bokeh.io import curdoc
from bokeh.models import ColumnDataSource
from bokeh.plotting import figure
source = ColumnDataSource(data={
    'x'       : data.loc[1970].fertility,
    'y'       : data.loc[1970].life,
    'country'      : data.loc[1970].Country,
    'pop'      : (data.loc[1970].population / 20000000) + 2,
    'region'      : data.loc[1970].region,
})
xmin, xmax = min(data.fertility), max(data.fertility)
ymin, ymax = min(data.life), max(data.life)
plot = figure(title='Gapminder Data for 1970', plot_height=400, plot_width=700,
              x_range=(xmin, xmax), y_range=(ymin, ymax))
plot.circle(x='x', y='y', fill_alpha=0.8, source=source)
plot.xaxis.axis_label ='Fertility (children per woman)'
plot.yaxis.axis_label = 'Life Expectancy (years)'


from bokeh.models import CategoricalColorMapper
from bokeh.palettes import Spectral6
regions_list = data.region.unique().tolist()
color_mapper = CategoricalColorMapper(factors=regions_list, palette=Spectral6)
plot.circle(x='x', y='y', fill_alpha=0.8, source=source,
            color=dict(field='region', transform=color_mapper), legend='region')
plot.legend.location = 'top_right'
curdoc().add_root(plot)
curdoc().title = 'Gapminder'


from bokeh.layouts import widgetbox, row
from bokeh.models import Slider
def update_plot(attr, old, new):
    # set the `yr` name to `slider.value` and `source.data = new_data`
    yr = slider.value
    new_data = {
        'x'       : data.loc[yr].fertility,
        'y'       : data.loc[yr].life,
        'country' : data.loc[yr].Country,
        'pop'     : (data.loc[yr].population / 20000000) + 2,
        'region'  : data.loc[yr].region,
    }
    source.data=new_data
    plot.title.text = 'Gapminder data for %d' % yr
slider = Slider(start=1970, end=2010, step=1, value=1970, title='Year')
slider.on_change('value', update_plot)
layout = row(widgetbox(slider), plot)
curdoc().add_root(layout)


from bokeh.models import HoverTool
hover = HoverTool(tooltips=[('Country', '@country')])
plot.add_tools(hover)
layout = row(widgetbox(slider), plot)
curdoc().add_root(layout)
plot = figure(tools=[hover, 'pan', 'wheel_zoom'])

def update_plot(attr, old, new):
    yr = slider.value
    x = x_select.value
    y = y_select.value
    plot.xaxis.axis_label = x
    plot.yaxis.axis_label = y
    new_data = {
        'x'       : data.loc[yr][x],
        'y'       : data.loc[yr][y],
        'country' : data.loc[yr].Country,
        'pop'     : (data.loc[yr].population / 20000000) + 2,
        'region'  : data.loc[yr].region,
    }
    source.data = new_data
    plot.x_range.start = min(data[x])
    plot.x_range.end = max(data[x])
    plot.y_range.start = min(data[y])
    plot.y_range.end = max(data[y])
    plot.title.text = 'Gapminder data for %d' % yr

slider = Slider(start=1970, end=2010, step=1, value=1970, title='Year')
slider.on_change('value', update_plot)
x_select = Select(
    options=['fertility', 'life', 'child_mortality', 'gdp'],
    value='fertility',
    title='x-axis data'
)
select.on_change('value', update_plot)

y_select = Select(
    options=['fertility', 'life', 'child_mortality', 'gdp'],
    value='life',
    title='y-axis data'
)
select.on_change('value', update_plot)
layout = row(widgetbox(slider, x_select, y_select), plot)
curdoc().add_root(layout)





















































