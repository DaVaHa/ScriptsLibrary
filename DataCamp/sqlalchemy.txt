## SQLAlchemy ##

from sqlalchemy import create_engine
engine = create_engine('sqlite:///census_nyc.sqlite')
connection = engine.connect()

# connection string
# driver + dialect /// filename

# view tables
engine.table_names()


# REFLECTION
from sqlalchemy import MetaData, Table
metadata = Metadata()
census = Table('census', metadata, autoload=True, autoload_with=engine)
repr(census)


# RAW QUERY
from sqlalchemy import create_engine
engine = create_engine('sqlite:///census_nyc.sqlite')
connection = engine.connect()
stmt = 'SELECT * FROM people'
result_proxy = connection.execute(stmt)
results = result_proxy.fetchall()

# QUERY SQLALCHEMY
from sqlalchemy import Table, MetaData, select
metadata = Metadata()
census = Table('census', metadata, autoload=True, autoload_with=engine)
stmt = select([census])
print(stmt)
results = connection.execute(stmt).fetchall()

# where clause
stmt = select([census])
stmt = stmt.where(census.columns.state == 'California')
results = connection.execute(stmt).fetchall()

stmt.where(census.columns.state.startswith('New'))
for result in connection.execute(stmt):  #no need for fetchall() in for loop
    print(result.state, result.pop2000)

in_(), like(), between(), and_(), not_(), or_()

from sqlalchemy import or_
stmt = select([census]).where(or_(census.columns.state == 'california', 
				census.columns.state == 'new york')  )
# POSTGRESQL
# psycopg2
engine = create_engine('postgresql+psycopg2://scott:tiger@localhost/mydatabase')
engine = create_engine('postgresql+psycopg2://student:datacamp@postgresql.rds.amazonaws.com:5432/census')

stmt = select([census]).where(census.columns.state.in_(states))
for result in connection.execute(stmt):
    
    print(result.state, result.pop2000)

stmt = select([census]).where(
 and_( census.columns.state == 'California',
 census.columns.sex != 'M'
) 
)

# ordering
order_by()
stmt = select([census.columns.state, census.columns.sex])
stmt = stmt.order_by(census.columns.state, census.columns.sex)
results = connection.execute(stmt).fetchall()

from sqlalchemy import desc
stmt.order_by(desc(census.columns.state))  # DESC
# sum, count, group by
from sqlalchemy import func
stmt = select([func.sum(census.columns.age)])
results = connection.execute(stmt).scalar()

stmt = select([census.columns.sex, census.columns.age, func.sum(census.columns.pop2008)]).group_by(census.columns.sex, census.columns.age)
results = connection.execute(stmt).fetchall()

# naming results label()
stmt = select([census.columns.sex, func.sum(census.columns.pop2008).label('pop2008_sum')])
stmt = stmt.group_by(census.columns.sex)
results = connection.execute(stmt).fetchall()
print(results[0].keys())

# distinct
select([func.count(census.columns.state.distinct())])
distinct_state_count = connection.execute(stmt).scalar()

## pandas & matplotlib
df = pd.DataFrame(results)
df.columns = results[0].keys()
df[10:20].plot.barh()
plt.show()


# CALCULATIONS
stmt = select([census.colums.age, (census.columns.pop2008-census.columns.pop2000).label('pop_change')])
stmt = stmt.group_by(census.columns.age)
stmt = stmt.order_by(desc('pop_change'))
stmt = stmt.limit(5)
results = connection.execute(stmt).fetchall()

# case statement
from sqlalchemy import case
stmt = select([ func.sum( case([(census.columns.state == 'New York', census.columns.pop2008)], else_=0) ) ])

# cast statement
from sqlalchemy import case, cast, Float
stmt = select([ ( 
		func.sum( case([(census.columns.state == 'New York', census.columns.pop2008)], else_=0) )
		/ cast(func.sum(census.columns.pop2008), Float) 
		* 100
		).label('ny_percent')
		])

## MySQL
import pymysql
engine = create_engine('mysql+pymysql://student:datacamp@courses.csrrinzqubik.us-east-1.rds.amazonaws.com:3306/census')

# JOINs
stmt = select([census.columns.pop2008, state_fact.columns.abbreviation])  # uses predefined relationship from database # if available in Reflection

stmt = select([func.sum(census.columns.pop2000)])
stmt = stmt.select_from(census.join(state_fact, census.columns.state == state_fact.columns.name))  # before where, group_by & order_by
stmt = stmt.where(state_fact.columns.census_division_name == 'East South Central')

results = connection.execute(stmt).scalar()

# self referencing tables
managers = employees.alias()
stmt = select([managers.columns.name.label('manager'), employees.columns.name.label('employee')])
stmt = stmt.select_from(employees.join(managers, managers.columns.id == employees.columns.manager)
stmt = stmt.order_by(managers.columns.name)
results = connection.execute(stmt).fetchall()

# returning blocks
while more_results:
    partial_results = results_proxy.fetchmany(50)
    if partial_results == []:
	more_results = False
    for row in partial_results:
	state_count[row.state] += 1

results_proxy.close()

# creating tables
from sqlalchemy import (Table, Column, String, Integer, Decimal, Boolean)
employees = Table('employees', metadata, 
		Column('id', Integer()), 
		Column('name', String(255), unique=True, nullable=False), 
		Column('salary', Decimal(), default=100.00),
		Column('active', Boolean(), default=True) )
metadata.create_all(engine)
engine.table_names()
employees.constraints

# inserting data
from sqlalchemy import insert
stmt = insert(employees).values(id=1, name='Jason', salary=1,00, active=True)  #insert one row
result_proxy = connection.execute(stmt)
print(result_proxy.rowcount)

stmt = insert(employees)
values_list = [{'id':2, 'name':'Rebecca', 'salary':2.00 , 'active': True},   #list of dictionaries
		{'id':3, 'name':'Bob', 'salary':0.00 , 'active': False}
result_proxy = connection.execute(stmt, values_list)  #inserting many rows
print(result_proxy.rowcount)

# updating data 
from sqlalchemy import update
stmt = update(employees)
stmt = stmt.where(employees.columns.id == 3)
stmt = stmt.values(active=True)
result_proxy = connection.execute(stmt)   #one row
print(result_proxy.rowcount)

stmt = update(employees)
stmt = stmt.where(employees.columns.active == True)
stmt = stmt.values(active=False, salary=0.00)
result_proxy = connection.execute(stmt)   #multiple rows
print(result_proxy.rowcount)

new_salary = select([employees.columns.salary])
new_salary = new_salary.order_by(desc(employees.columns.salary))
new_salary = new_salary.limit(1)
stmt = update(employees)
stmt = stmt.values(salary=new_salary)
result_proxy = connection.execute(stmt)   #correlated update
print(result_proxy.rowcount)

# delete data
from sqlalchemy import delete
stmt = select([func.count(extra_employees.columns.id)])
connection.execute(stmt).scalar()
delete_stmt = delete(extra_employees)
result_proxy = connection.execute(delete_stmt)
print(result_proxy.rowcount)

delete_stmt = delete(extra_employees).where(employees.columns.id == 3)
result_proxy = connection.execute(delete_stmt)
print(result_proxy.rowcount)

# dropping table
extra_employees.drop(engine)
print(extra_employees.exists(engine))

metadata.drop_all(engine)
engine.table_names()




























