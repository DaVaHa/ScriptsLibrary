CUSTOMER SEGMENTATION IN PYTHON

### Cohort Analysis ###

cohorts = mutually exclusive segments
compare metrics across product & customer lifecycle

Time cohorts (by time of first use of company's product/service)
Behavior cohorts (by product or service)
Size cohorts (amount of spending)

= pivot table data
Cohort in rows
Cohort Index in columns
Metrics in the table

Cohorts analysis heatmap
Rows= first activity (month of acquisition)
Columns = Time since first activity (month since acquisition) "retention rate"


# get month of invoice & cohort
def get_month(x): return dt.datetime(x.year, x.month, 1)   # get month from datetime data type
online['InvoiceMonth'] = online['InvoiceDate'].apply(get_month) # apply to invoice date
grouping = online.groupby('CustomerID')['InvoiceMonth']  # group by customer
online['CohortMonth'] = grouping.transform('min') # to get smallest month by customer


# function to extract year, month & day integers values
def get_date_int(df, column):
    year = df[column].dt.year
    month = df[column].dt.month
    day = df[column].dt.day
    return year, month, day

# Assign time offset value
invoice_year, invoice_month, invoice_day = get_date_int(online, 'InvoiceMonth') 
cohort_year, cohort_month, cohort_day = get_date_int(online, 'CohortMonth')
years_diff = invoice_year - cohort_year
months_diff = invoice_month - cohort_month
online['CohortIndex'] = years_diff * 12 + months_diff + 1  # = months since cohort month # +1 so cohortmonth = 1
online.head()

# Count monthly active customers from each cohort
grouping = online.groupby(['CohortMonth', 'CohortIndex'])
cohort_data = grouping['CustomerID'].apply(pd.Series.nunique)
cohort_data = cohort_data.reset_index()
cohort_counts = cohort_data.pivot(index='CohortMonth',
                                  columns='CohortIndex', 
                                  values='CustomerID')

# Cohort metrics
cohort_sizes = cohort_counts.iloc[:,0] # total size of cohort #first column
retention = cohort_counts.divide(cohort_sizes, axis=0)
retention.round(3) * 100

# Other metrics # Average quantity
grouping = online.groupby(['CohortMonth', 'CohortIndex'])
cohort_data = grouping['Quantity'].mean()
cohort_data = cohort_data.reset_index()
average_quantity = cohort_data.pivot(index='CohortMonth', 
                                     columns='CohortIndex', 
                                     values='Quantity')

## Retention rates
# Count the number of unique values per customer ID
cohort_data = grouping['CustomerID'].apply(pd.Series.nunique).reset_index()
# Create a pivot 
cohort_counts = cohort_data.pivot(index='CohortMonth', columns="CohortIndex", values='CustomerID')
# Select the first column and store it to cohort_sizes
cohort_sizes = cohort_counts.iloc[:,0]
# Divide the cohort count by cohort sizes along the rows
retention = cohort_counts.divide(cohort_sizes, axis=0)


# Heat map
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10,8))
plt.title('Retention rates')
sns.heatmap(data=retention, annot=True, fmt='.0%', vmin=0.0, vmax=0.5, cmap='BuGn')
plt.show()

# 
import seaborn as sns
plt.figure(figsize=(8, 6))
plt.title('Average Spend by Monthly Cohorts')
sns.heatmap(average_quantity, annot=True, cmap='Blues') # blue color # legend without limits (no vmin/vmax)
plt.show()



































