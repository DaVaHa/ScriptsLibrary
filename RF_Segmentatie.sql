/*

RF Segmentatie op datum X

Cluster	Seq.	Regel
S	1.	Indien de datum van laatste aankoop vermeerderd met de gemiddelde aankoopfrequentie en verminderd met de standaarddeviatie van de aankoopfrequentie verder dan 6 dagen (>) in de toekomst ligt
U	2.	Indien de datum van laatste aankoop vermeerderd met de gemiddelde aankoopfrequentie verder dan 6 dagen (>) in de toekomst ligt
T	3.	Indien de datum van laatste aankoop vermeerderd met de gemiddelde aankoopfrequentie tussen vandaag (>=) en 6 dagen (<=) in de toekomst ligt
W	4.	Indien de datum van laatste aankoop vermeerderd met de gemiddelde aankoopfrequentie en vermeerderd met de standaarddeviatie van de aankoopfrequentie minder dan 6 dagen (<) in de toekomst ligt
R	5.	Indien de datum van laatste aankoop vermeerderd met de gemiddelde aankoopfrequentie voor vandaag (<) valt.


RunTime : 2 min.


*/




/*--------------------------------------------------------------------------------------------------*/
/*																									*/
/*						Calculate RF																*/
/*																									*/
/*--------------------------------------------------------------------------------------------------*/

-- DATE

declare @TODAY date = '20190401'


select @TODAY, 
   CONVERT(varchar(8),dateadd(day,-1,@TODAY),112) '@PA_YESTERDAY'
,  @TODAY '@PA_TODAY_DATE'
,  CONVERT(varchar(8),dateadd(year, -1,@TODAY),112) '@PA_FROM_1Y'
,  CONVERT(varchar(8),dateadd(year, -3,@TODAY),112) '@PA_FROM_3Y'
,  DATEADD(DAY, 6, @TODAY) '@PA_ENDWEEK_DATE'


-- DECLARE PARAMETERS	
DECLARE @PA_YESTERDAY int
DECLARE @PA_TODAY_DATE DATE
DECLARE @PA_FROM_1Y INT
DECLARE @PA_FROM_3Y INT
DECLARE @PA_ENDWEEK_DATE DATE
		
-- SET PARAMETERS

SET @PA_YESTERDAY = CONVERT(varchar(8),dateadd(day,-1,@TODAY),112)
SET @PA_TODAY_DATE = @TODAY
SET @PA_FROM_1Y = CONVERT(varchar(8),dateadd(year, -1,@TODAY),112)
SET @PA_FROM_3Y = CONVERT(varchar(8),dateadd(year, -3,@TODAY),112)
SET @PA_ENDWEEK_DATE = DATEADD(DAY, 6, @TODAY)

select @TODAY, @PA_YESTERDAY, @PA_TODAY_DATE, @PA_FROM_1Y, @PA_FROM_3Y, @PA_ENDWEEK_DATE;


DROP TABLE #TEMP_CONSEC_VISITS;

SELECT
	CUSTOMER_WID
	, DAY_DATE
	, NO_OF_CONSEC_VISITS
	, ROW_NUMBER() OVER (PARTITION BY CUSTOMER_WID ORDER BY DAY_DATE DESC) AS ROW_NO
	, CONVERT(INT, NULL) AS LAST_VISIT --PLACEHOLDER
	, CONVERT(DATE, NULL) AS DAY_DATE_PREVIOUS --PLACEHOLDER
	, CONVERT(NUMERIC, NULL) AS DAYS_INBETWEEN --PLACEHOLDER
INTO 
	#TEMP_CONSEC_VISITS
FROM
	(
		SELECT
			Sales.CUSTOMER_WID
			, Date.DAY_DATE
			, DENSE_RANK() OVER (PARTITION BY Sales.CUSTOMER_WID ORDER BY Date.DAY_DATE)
				+ DENSE_RANK() OVER (PARTITION BY Sales.CUSTOMER_WID ORDER BY Date.DAY_DATE DESC) 
				- 1 AS NO_OF_CONSEC_VISITS
		FROM
			JBC_BI.FACT.Sales
			INNER JOIN JBC_BI.DIM.Date
				ON Sales.TRANSDATE_WID = Date.DAY_WID
		WHERE
			Sales.TRANSDATE_WID BETWEEN @PA_FROM_3Y AND @PA_YESTERDAY
			AND Sales.AMOUNT > 0
			AND Sales.CUSTOMER_WID > 0
		GROUP BY
			Sales.CUSTOMER_WID
			, Date.DAY_DATE
	) SUB
WHERE
	SUB.NO_OF_CONSEC_VISITS >= 3 -- ONLY CUSTOMERS WITH MORE THAN TWO CONSECUTIVE PURCHASES
ORDER BY
	CUSTOMER_WID


MERGE 
	#TEMP_CONSEC_VISITS AS [TARGET]
USING 
	#TEMP_CONSEC_VISITS AS [SOURCE]
ON 
	[TARGET].CUSTOMER_WID = [SOURCE].CUSTOMER_WID
	AND [TARGET].DAY_DATE = [SOURCE].DAY_DATE
	AND [SOURCE].ROW_NO = 1
WHEN MATCHED 
THEN UPDATE SET 
		[TARGET].LAST_VISIT = 1
;

MERGE 
	#TEMP_CONSEC_VISITS AS [TARGET]
USING 
	#TEMP_CONSEC_VISITS AS [SOURCE]
ON 
	[TARGET].CUSTOMER_WID = [SOURCE].CUSTOMER_WID
	AND [TARGET].ROW_NO = [SOURCE].ROW_NO - 1
WHEN MATCHED 
THEN UPDATE SET 
		[TARGET].DAY_DATE_PREVIOUS = [SOURCE].DAY_DATE
		, [TARGET].DAYS_INBETWEEN = DATEDIFF(D,[SOURCE].DAY_DATE, [TARGET].DAY_DATE)
;


DROP TABLE #TEMP_CONSEC_VISITS_AVG_STDDEV ;

SELECT
	TEMP_CONSEC_VISITS.CUSTOMER_WID
	, FLOOR(AVG(TEMP_CONSEC_VISITS.DAYS_INBETWEEN)) AS AVG_FREQ
	, CONVERT(INT, STDEVP(TEMP_CONSEC_VISITS.DAYS_INBETWEEN)) AS STDDEV_FREQ
INTO
	#TEMP_CONSEC_VISITS_AVG_STDDEV
FROM
	#TEMP_CONSEC_VISITS TEMP_CONSEC_VISITS
WHERE
	TEMP_CONSEC_VISITS.DAYS_INBETWEEN > 0
GROUP BY
	TEMP_CONSEC_VISITS.CUSTOMER_WID

	
DROP TABLE #TEMP_RF_COLOR; 

SELECT
	TEMP_CONSEC_VISITS.CUSTOMER_WID
	, TEMP_CONSEC_VISITS.DAY_DATE
	, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ
	, TEMP_CONSEC_VISITS_AVG_STDDEV.STDDEV_FREQ
	, DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE) AS DAY_DATE_NEXT_VISIT
	, CASE
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  - 1 * TEMP_CONSEC_VISITS_AVG_STDDEV.STDDEV_FREQ > @PA_ENDWEEK_DATE THEN 'S'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  > @PA_ENDWEEK_DATE THEN 'U'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  between  @PA_TODAY_DATE  and @PA_ENDWEEK_DATE THEN 'T'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  + 3 * TEMP_CONSEC_VISITS_AVG_STDDEV.STDDEV_FREQ < @PA_ENDWEEK_DATE THEN 'W'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  + 1 * TEMP_CONSEC_VISITS_AVG_STDDEV.STDDEV_FREQ < @PA_ENDWEEK_DATE THEN 'W'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  < @PA_TODAY_DATE  THEN 'R'
	END AS RF_GROUP_OLD
	, CASE
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  between  DATEADD(DAY, -7, @PA_TODAY_DATE) and DATEADD(DAY, 14, @PA_ENDWEEK_DATE)  THEN 'T'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  - 1 * TEMP_CONSEC_VISITS_AVG_STDDEV.STDDEV_FREQ > @PA_ENDWEEK_DATE THEN 'S'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE) > @PA_ENDWEEK_DATE THEN 'U'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  + 3 * TEMP_CONSEC_VISITS_AVG_STDDEV.STDDEV_FREQ < @PA_ENDWEEK_DATE THEN 'W'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  + 1 * TEMP_CONSEC_VISITS_AVG_STDDEV.STDDEV_FREQ < @PA_ENDWEEK_DATE THEN 'R'
		WHEN DATEADD(D, TEMP_CONSEC_VISITS_AVG_STDDEV.AVG_FREQ, TEMP_CONSEC_VISITS.DAY_DATE)  < @PA_TODAY_DATE THEN 'R'

	END AS RF_GROUP_NEW
INTO
	#TEMP_RF_COLOR
FROM	
	#TEMP_CONSEC_VISITS TEMP_CONSEC_VISITS
	INNER JOIN #TEMP_CONSEC_VISITS_AVG_STDDEV TEMP_CONSEC_VISITS_AVG_STDDEV
		ON TEMP_CONSEC_VISITS.CUSTOMER_WID = TEMP_CONSEC_VISITS_AVG_STDDEV.CUSTOMER_WID
WHERE
	TEMP_CONSEC_VISITS.LAST_VISIT = 1


	-- SHOW RESULTS

	select top 1000 *
	from #TEMP_RF_COLOR

	
	-- IMPORT RESULTS INTO TABLE
	drop table JBC_BI_Sandbox.dbo.RF_20190401

	select *
	into JBC_BI_Sandbox.dbo.RF_20190401
	from #TEMP_RF_COLOR

	select top 1000 *
	from JBC_BI_Sandbox.dbo.RF_20190401
	