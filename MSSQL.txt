-- COLLATE DATABASE_DEFAULT

-- RENAME COLUMN
EXEC sp_rename 'MASTER.STORE_OPENING_CLOSING_DAYS.OPENING_DAY', 'STORE_OPENING_DAY';

-- FLOAT WITH 2 DECIMALS
cast( CALCULATION ) as numeric(36,2))

-- TODAY 
GETDATE()

- date to YYYYMMDD  (CHAR)
CONVERT(VARCHAR(10), GETDATE() , 112)

- YYYYMMDD (int) to PY YYYYMMDD int
convert(int,CONVERT(VARCHAR(8),DATEADD(YEAR, -1, CONVERT(datetime, convert(varchar(8),COLUMN_NAME))),112)) /* +1 */

DECLARE @date int;
SET @date = 20120728    
SELECT CONVERT(varchar(20), CONVERT(date, CONVERT(varchar(8), @date), 112),110)as datetime

- DATEDIFF tussen twee datum
select DATEDIFF(day, '20100801', '20101205')

- CURRENT MONTH + 1
select '201712', '201712'+'01',
convert(datetime, '201712'+'01',112),
dateadd(mm,1,convert(datetime, '201712'+'01',112)),
convert(varchar,dateadd(mm,1,convert(datetime, '201712'+'01',112)),112),
LEFT(convert(varchar,dateadd(mm,1,convert(datetime, '201712'+'01',112)),112),6)
	

-- vorig jaar vs jaar daarvoor
declare @datumtotP1 int = (select convert(varchar(8),dateadd(day,-1,getdate()),112));
declare @datumvanP1 int = (select convert(varchar(8),dateadd(day,-365,getdate()),112));
declare @datumtotP2 int = (select convert(varchar(8),dateadd(day,-365-1,getdate()),112));
declare @datumvanP2 int = (select convert(varchar(8),dateadd(day,-365-365,getdate()),112));

select 	@datumtotP1 'YESTERDAY', @datumvanP1 'TODAY_PY', @datumtotP2 'YESTERDAY_PY', @datumvanP2 'TODAY_2PY'

-- vorig jaar
convert(varchar,dateadd(year,-1,getdate()),112) 
	
- SUBSTRING from character onwards (column, character, length of string)
SUBSTRING(clm, CHARINDEX('\', clm) + 1, LEN(clm))

- ALPHANUMERIC
where column like '%[^0-9A-Za-z]%';

-- FORWARD FILL
	SELECT
	[Time]
	,COALESCE(Price, 
		(SELECT TOP (1) Price 
		FROM dbo.MyTable AS p2 
		WHERE
			p2.Price IS NOT NULL 
			AND p2.[Time] <= p.[Time] ORDER BY p2.[Time] DESC))
FROM dbo.MyTable AS p;

- group by MONTH
substring(convert(VARCHAR(10), TRANSDATE_WID),1,6) 

-- Delete temp table
IF OBJECT_ID('tempdb..#months') IS NOT NULL DROP TABLE #months


-- RANK OVER PARTITION BY
RANK() OVER   (PARTITION BY clm ORDER BY other_clm ) AS Rank 

-- LOOP OVER TABLE
DECLARE @MyCursor CURSOR;
	DECLARE @StoreName varchar(100);
	BEGIN
		SET @MyCursor = CURSOR FOR
		select STORENAME from #stores   -- looping over rows 

		OPEN @MyCursor 
		FETCH NEXT FROM @MyCursor 
		INTO @StoreName

		WHILE @@FETCH_STATUS = 0
		BEGIN
		  
		  -- query
		  
		  
		  -- end query
		  
		  FETCH NEXT FROM @MyCursor 
		  INTO @StoreName 
		END; 

		CLOSE @MyCursor ;
		DEALLOCATE @MyCursor;
	END;
	
	
-- LOOP OVER RANGE
	DECLARE @cnt INT = 0;

	WHILE @cnt < 10
	BEGIN
	   PRINT 'Inside simulated FOR LOOP on TechOnTheNet.com - ' + convert(varchar, @cnt) ;
	   SET @cnt = @cnt + 1;
	END;

	PRINT 'Done simulated FOR LOOP on TechOnTheNet.com';
	GO


-- LOOPING OVER LIST

	DECLARE @Years TABLE (Yr CHAR(2))
	INSERT INTO @Years VALUES ('13')
	INSERT INTO @Years VALUES ('14')
	INSERT INTO @Years VALUES ('15')
	INSERT INTO @Years VALUES ('16')
	INSERT INTO @Years VALUES ('17')

	DECLARE @Yr CHAR(2)

	DECLARE db_cursor CURSOR FOR  
	SELECT Yr FROM @Years
	
	OPEN db_cursor   
	FETCH NEXT FROM db_cursor INTO @Yr   

	WHILE @@FETCH_STATUS = 0   
	BEGIN   
	
		-- CALCULATE GROUP A 
       	declare @CalculateGroupA varchar(2000);
		set @CalculateGroupA = 
		'insert into #whatever
		select '+ @Yr + ' Jaar,
		SUM(CASE WHEN [Klant'+ @Yr + '] = ''Y'' THEN 1 ELSE 0 END) Klanten,
		SUM([OmzetTotaal_'+ @Yr + ']) OmzetTotaal,
		SUM([OmzetOnline_'+ @Yr + ']) OmzetOnline
	    SUM([Kinderen]) Kinderen   
      	from [JBC_BI_Sandbox].[dbo].[CustomerOverviewFull]
		where CUSTOMER_WID in (select CUSTOMER_WID from #CustomersA)'
		
		declare @FinalQueryA varchar(4000);
		set @FinalQueryA = @QueryCustA + @CalculateGroupA
		exec(@FinalQueryA) 
		
		
       FETCH NEXT FROM db_cursor INTO @Yr   
       
	END   

	CLOSE db_cursor   
	DEALLOCATE db_cursor
	
	
- PIVOT 

	SELECT CUSTOMER_WID, [2013] 'OmzetTotaal_13', [2014] 'OmzetTotaal_14', [2015] 'OmzetTotaal_15', [2016] 'OmzetTotaal_16', [2017] 'OmzetTotaal_17'
	into #Totaal
	FROM	(SELECT CUSTOMER_WID, Omzet_Totaal, FYEAR_WID
			 FROM [JBC_BI_Sandbox].[dbo].[COF_CustomerRevenues]) p
	PIVOT
	(SUM(Omzet_Totaal)
	FOR FYEAR_WID in([2013], [2014], [2015], [2016], [2017]) ) t


-- CREATE PIVOT PARAMETERS WITH PYTHON
text = """param1
param2
...
"""
for t in text.split('\n'):
	#print("isnull([{0}],0) as '{0}',".format(t.replace("'","")))
	print("[{}],".format(t.replace("'","")), end='')


- IF ELSE PRINT

declare @today varchar(8) = (select max(TRANSDATE_WID) from JBC_BI.FACT.Sales)
--select @today
IF @today != 20190129  
    PRINT N'The current database is master.';  
ELSE  
    PRINT N'>> DAY =  ' + @today + ' >>';  
GO 


	 
-- DISTANCE IN KM BETWEEN TWO POINTS (LONGITUDE & LATITUDE)

CASE WHEN CL_LAT != LAT and CL_LONG != LONG THEN

ACOS(SIN(PI()*CL_LAT/180.0)*SIN(PI()*LAT/180.0)+COS(PI()*CL_LAT/180.0)*COS(PI()*LAT/180.0)*COS(PI()*LONG/180.0-PI()*CL_LONG/180.0))*6371 

ELSE NULL END 'KlantKM'


-- DROP TABLE
exec('drop table JBC_BI_Sandbox.dbo.TABLE_NAME');

-- DROP TEMP TABLE
IF OBJECT_ID('tempdb..#today') IS NOT NULL DROP TABLE #today

-- DROP COLUMN
alter table scheme.subscheme.tabel
drop column column_name;

-- RENAME TABLE
sp_rename 'schema.old_table_name', 'new_table_name'


-- RENAME COLUMNS
sp_rename 'TABLE_NAME.OLD_COLUMN_NAME', 'NEW_COLUMN_NAME', 'COLUMN';


-- MODIFY COLUMN
ALTER TABLE db_schema.table_name
ALTER COLUMN column_name data_type;

-- ADD NEW COLUMN
 ALTER TABLE [JBC_BI_Master].[MASTER].[FIX_CUSTOMER]
  ADD CUSTOMER_WID_NEW int;

-- ADD CALCULATED COLUMN
ALTER TABLE table_name
ADD column_name 
AS (
CASE 
WHEN column_1 = 0 THEN '1'
WHEN column_1 = 1 THEN '0'
ELSE NULL
END
);


-- FLOAT WITH 2 DECIMALS
cast( column_name ) as numeric(36,2))

-- SIZE DATABASE 
SELECT 
      database_name = DB_NAME(database_id)
    , log_size_mb = CAST(SUM(CASE WHEN type_desc = 'LOG' THEN size END) * 8. / 1024 AS DECIMAL(8,2))
    , row_size_mb = CAST(SUM(CASE WHEN type_desc = 'ROWS' THEN size END) * 8. / 1024 AS DECIMAL(8,2))
    , total_size_mb = CAST(SUM(size) * 8. / 1024 AS DECIMAL(8,2))
FROM sys.master_files WITH(NOWAIT)
--WHERE database_id = DB_ID() -- for current db 
GROUP BY database_id



-- SEE LAST RUN TIME OF STORED PROCEDURE

SELECT TOP 10 d.object_id, d.database_id, OBJECT_NAME(object_id, database_id) 'proc name',   
    d.cached_time, d.last_execution_time, d.total_elapsed_time,  
    d.total_elapsed_time/d.execution_count AS [avg_elapsed_time],  
    d.last_elapsed_time, d.execution_count  
FROM sys.dm_exec_procedure_stats AS d  

where OBJECT_NAME(object_id, database_id)= 'PROC_DD_KlantenType_KPI'
ORDER BY [total_worker_time] DESC;


-- GET ALL STORED PROCEDURES FROM DATABASE

select *  from JBC_BI.information_schema.routines;


-- GENERATE GUID (HASH MD5)
select CONVERT(VARCHAR(32), HashBytes('MD5', 'MASSEN311'+convert(varchar,GETDATE())), 2)


-- RUN STORED PROCEDURE ONLY ON WEEKDAYS

	declare @weekday int;
	set  @weekday = (	select WEEKDAY_NUMBER
										from JBC_BI.DIM.Date
										where DAY_WID = convert(varchar,getdate(),112)
									)
	-- select @weekday
	IF  @weekday != 2 -- = NOT TUESDAY
		BEGIN  
			PRINT 'NOT A TUESDAY = NO UPDATE'
			RETURN    -- = EXIT PROCEDURE
		END  
	ELSE  
		BEGIN
		  PRINT 'TUESDAY!'
			select 'Daniel'
		END


-- SIZE OF INDEX
-- Ensure a USE <databasename> statement has been executed first.
SELECT i.[name] AS IndexName
    ,SUM(s.[used_page_count]) * 8 AS IndexSizeKB
FROM sys.dm_db_partition_stats AS s
INNER JOIN sys.indexes AS i ON s.[object_id] = i.[object_id]
    AND s.[index_id] = i.[index_id]
GROUP BY i.[name]
ORDER BY i.[name]
GO